#!/bin/bash
clear

# Logo ASCII art
echo -e "\e[1;36m"
cat << "EOF"
 ____            _   ____        _
|  _ \ ___ _ __ | |_/ ___|  ___ | |
| |_) / _ \ '_ \| __\___ \ / _ \| |
|  __/  __/ | | | |_ ___) | (_) | |
|_|   \___|_| |_|\__|____/ \___/|_|

PentSol V2.0.0 - Pentest Solution Bot
EOF
echo -e "\e[0m"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
INFO='\033[1;36m'

# Function to print colored messages
print_message() {
    echo -e "${GREEN}[+]${NC} $1"
}

print_error() {
    echo -e "${RED}[X]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[i]${NC} $1"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check Python version
check_python() {
    if command_exists python3; then
        PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
        if (( $(echo "$PYTHON_VERSION >= 3.8" | bc -l) )); then
            return 0
        else
            print_error "Python version must be 3.8 or higher"
            return 1
        fi
    else
        print_error "Python 3 is not installed"
        return 1
    fi
}

# Function to check if Docker is available
check_docker() {
    if command_exists docker; then
        if docker info >/dev/null 2>&1; then
            return 0
        else
            print_warning "Docker is installed but not running"
            return 1
        fi
    else
        print_warning "Docker is not installed"
        return 1
    fi
}

# Function to check if running in Docker
is_docker() {
    [ -f /.dockerenv ] || [ -f /run/.containerenv ]
}

# Function to setup virtual environment
setup_venv() {
    if [ ! -d "venv" ]; then
        print_message "Creating virtual environment..."
        python3 -m venv venv
        if [ $? -ne 0 ]; then
            print_error "Failed to create virtual environment"
            return 1
        fi
    fi

    # Activate virtual environment
    source venv/bin/activate
    if [ $? -ne 0 ]; then
        print_error "Failed to activate virtual environment"
        return 1
    fi

    # Install requirements
    print_message "Installing requirements..."
    pip install -r req.txt
    if [ $? -ne 0 ]; then
        print_error "Failed to install requirements"
        return 1
    fi
}

# Function to check and create .env file if needed
check_env() {
    if [ ! -f ".env" ]; then
        print_warning "No .env file found. Creating template..."
        echo "BOT_TOKEN=your_bot_token_here" > .env
        print_message "Please edit .env file and add your bot token"
        exit 1
    fi

    # Check if BOT_TOKEN is set
    if ! grep -q "BOT_TOKEN=" .env; then
        print_error "BOT_TOKEN not found in .env file"
        exit 1
    fi
}

# Function to run in Docker
run_docker() {
    print_message "Running in Docker..."
    
    # Build Docker image if needed
    if ! docker image inspect pentsol-v2 >/dev/null 2>&1; then
        print_message "Building Docker image..."
        docker build -t pentsol-v2 .
        if [ $? -ne 0 ]; then
            print_error "Failed to build Docker image"
            return 1
        fi
    fi

    # Run Docker container
    print_message "Starting Docker container..."
    docker run -it --rm \
        -v "$(pwd):/app" \
        --name pentsol-v2 \
        pentsol-v2
}

# Function to run in venv
run_venv() {
    print_message "Running in virtual environment..."
    setup_venv || return 1
    python3 main.py
}

# Function to show help
show_help() {
    echo "Usage: ./pentsol [OPTIONS]"
    echo
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo "  -d, --docker   Force running in Docker"
    echo "  -v, --venv     Force running in virtual environment"
    echo "  -a, --auto     Auto-detect best environment (default)"
    echo
    echo "Examples:"
    echo "  ./pentsol              # Auto-detect environment"
    echo "  ./pentsol --docker     # Force Docker"
    echo "  ./pentsol --venv       # Force virtual environment"
}

# Main execution
main() {
    # Parse command line arguments
    RUN_MODE="auto"
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -d|--docker)
                RUN_MODE="docker"
                shift
                ;;
            -v|--venv)
                RUN_MODE="venv"
                shift
                ;;
            -a|--auto)
                RUN_MODE="auto"
                shift
                ;;
            *)
                print_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done

    print_message "Starting Pentest & Security Solutions Bot..."

    # Check environment file
    check_env

    # If already in Docker, just run the bot
    if is_docker; then
        print_info "Already running in Docker container"
        python3 main.py
        exit 0
    fi

    # Determine how to run based on mode
    case $RUN_MODE in
        "docker")
            if check_docker; then
                run_docker
            else
                print_error "Cannot run in Docker mode"
                exit 1
            fi
            ;;
        "venv")
            if check_python; then
                run_venv
            else
                print_error "Cannot run in venv mode"
                exit 1
            fi
            ;;
        "auto")
            if check_docker; then
                print_info "Docker detected, using Docker mode"
                run_docker
            elif check_python; then
                print_info "Using virtual environment mode"
                run_venv
            else
                print_error "No suitable environment found"
                exit 1
            fi
            ;;
    esac
}

# Run main function
main "$@"